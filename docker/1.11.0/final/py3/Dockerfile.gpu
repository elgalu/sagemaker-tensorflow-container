ARG CUDA_BASE_VER="9.2"
ARG LINUX_VERSION="ubuntu16.04"

FROM tensorflow/serving:1.11.0-gpu as tensorflow_serving_image
# FROM nvidia/cuda:9.0-base-ubuntu16.04
FROM nvidia/cuda:${CUDA_BASE_VER}-cudnn7-devel-${LINUX_VERSION}

# Ensure ARGs before `FROM` stay:
ARG CUDA_BASE_VER
ARG LINUX_VERSION

LABEL maintainer="Amazon AI"
LABEL com.amazonaws.sagemaker.capabilities.accept-bind-to-port=true

RUN nvcc --version \
  && cat /usr/include/x86_64-linux-gnu/cudnn_v*.h | grep CUDNN_MAJOR -A 2 \
  && cat /usr/local/cuda/version.txt

# No interactive frontend during docker build
ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true

# Locale and encoding settings
ENV LANG_WHICH=en \
    LANG_WHERE=US \
    ENCODING=UTF-8
ENV LANGUAGE ${LANG_WHICH}_${LANG_WHERE}.${ENCODING}
ENV LANG="${LANGUAGE}" \
    LC_ALL="${LANGUAGE}"

# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING="${ENCODING}"

RUN apt -qqy update \
  && apt -qqy --no-install-recommends install \
    language-pack-en \
    tzdata \
    locales \
  && locale-gen ${LANGUAGE} \
  && dpkg-reconfigure --frontend noninteractive locales \
  && apt -qyy autoremove \
  && apt -qyy clean

# Timezone settings
ENV TZ="Europe/Berlin"
RUN echo "Setting time zone to '${TZ}'" \
  && echo "${TZ}" > /etc/timezone \
  && dpkg-reconfigure --frontend noninteractive tzdata

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/cuda/lib:/usr/local/lib" \
    CPLUS_INCLUDE_PATH="/usr/local/cuda/include" \
    CMAKE_VER="3.14.3" \
    TF_TENSORRT_VERSION="4.1.2"

# Install more dependencies
RUN cd /tmp \
 && apt-get update && apt-get install -y --no-install-recommends software-properties-common \
 && add-apt-repository ppa:deadsnakes/ppa -y \
 && apt-get update && apt-get install -y --no-install-recommends \
        'build-essential' \
        'apt-transport-https' \
        'gnupg' \
        'lsb-release' \
        'curl' \
        'wget' \
        'unzip' \
        'jq' \
        'libsm6' \
        'libxext6' \
        'libxrender-dev' \
        'nginx' \
        'git' \
        'cmake' \
        'libreadline-dev' \
        'libblas-dev' \
        'liblapack-dev' \
        'libgomp1' \
  && apt -qyy remove \
        'cmake' \
  && apt -qqy autoremove \
  && cd /tmp \
  && wget -nv "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/cmake-${CMAKE_VER}.tar.gz" \
  && tar -zxf "cmake-${CMAKE_VER}.tar.gz" \
  && cd "cmake-${CMAKE_VER}" \
  && ./configure \
  && make \
  && make install \
  && cd /tmp \
  && rm -rf /tmp/cmake* \
  && cmake --version \
  && cmake --version 2>&1 | grep "${CMAKE_VER}" \
  && apt -qyy remove \
        'python3.5' \
        'python3.5-minimal' \
        'libpython3.5-minimal' \
        'libpython3.5-stdlib' \
  && echo "Done with CMake stage"

# Compile newer OpenBlas from source
# Install Python 3.7
RUN cd /tmp \
  && _blas_commit="26411acd565051b860773b1e3b4f20ad6882872b" \
  && git clone "https://github.com/xianyi/OpenBLAS" \
  && cd OpenBLAS \
  && git checkout "${_blas_commit}" -b local_build \
  && git submodule update --init --recursive \
  && make NO_AFFINITY=1 USE_OPENMP=1 \
  && make install \
  && cd /tmp \
  && rm -rf /tmp/Open* \
  && apt -qyy install --no-install-recommends \
        'python3.7-dev' \
  && apt -qqy autoremove \
  && ln -s -f /usr/bin/python3.7 /usr/bin/python \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && nvcc --version \
  && curl -O "https://bootstrap.pypa.io/get-pip.py" \
  && python get-pip.py \
  && rm get-pip.py \
  && ln -s -f /usr/local/bin/pip /usr/bin/pip \
  && ls -lah --color='always' /usr/bin/pip* \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && echo "Done installing Python"

# The 'apt-get install' of nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.0
# adds a new list which contains libnvinfer library, so it needs another
# 'apt-get update' to retrieve that list before it can actually install the
# library.
# We don't install libnvinfer-dev since we don't need to build against TensorRT,
# and libnvinfer4 doesn't contain libnvinfer.a static library.
RUN cd /tmp \
    apt-get update && apt-get install -y --no-install-recommends \
        nvinfer-runtime-trt-repo-ubuntu1604-4.0.1-ga-cuda9.0 && \
    apt-get update && apt-get install -y --no-install-recommends \
        libnvinfer4=${TF_TENSORRT_VERSION}-1+cuda9.0 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    rm /usr/lib/x86_64-linux-gnu/libnvinfer_plugin* && \
    rm /usr/lib/x86_64-linux-gnu/libnvcaffe_parser* && \
    rm /usr/lib/x86_64-linux-gnu/libnvparsers*

# Removing tests to free some space
RUN set -ex; \
    curl -k -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py \
        --disable-pip-version-check \
        --no-cache-dir \
        "pip==18.1" \
    ; \
    pip --version; \
    find /usr/local -depth \
        \( \
            \( -type d -a \( -name test -o -name tests \) \) \
            -o \
            \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
        \) -exec rm -rf '{}' +; \
    rm -f get-pip.py

WORKDIR /

# Install TF Serving pkg
COPY --from=tensorflow_serving_image /usr/bin/tensorflow_model_server /usr/bin/tensorflow_model_server

ARG framework_installable="https://files.pythonhosted.org/packages/2c/65/8dc8fc4a263a24f7ad935b72ad35e72ba381cb9e175b6a5fe086c85f17a7/tensorflow_gpu-1.13.1-cp37-cp37m-manylinux1_x86_64.whl"
ARG framework_support_installable="sagemaker_tensorflow_container-1.0.0.tar.gz"

# COPY $framework_installable .
COPY ${framework_support_installable} .

# "sagemaker-tensorflow>=1.11,<1.12" && \
RUN pip install -U --no-cache-dir \
        "${framework_installable}" \
        "${framework_support_installable}" \
        'tensorflow-serving-api==1.11.0' \
        'numpy' \
        'scipy' \
        'sklearn' \
        'pandas' \
        'Pillow' \
        'h5py' \
  && rm ${framework_support_installable}

# entry.py comes from sagemaker-container-support
ENTRYPOINT ["entry.py"]
